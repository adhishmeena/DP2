0 1 Knapsack - Problem
Send Feedback
A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?
Input Format :
The first line of the input contains an integer value N, which denotes the total number of items.

The second line of input contains the N number of weights separated by a single space.

The third line of input contains the N number of values separated by a single space.

The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal.
Output Format :
Print the maximum value of V that the thief can steal.
Constraints :
1 <= N <= 20
1<= Wi <= 100
1 <= Vi <= 100

Time Limit: 1 sec
Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13
Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26
Sample Output 2 :
51

// recusion coding ninjas solution 

/* Time Complexity : O(3 ^ n) 
Space Complexity : O(N) 
Where N is the total number of weights */ 

public class Solution { 
public static int knapsack(int[] weights, int[] values, int n, int maxWeight) 
{ 
if (n == 0 || maxWeight == 0)
{ 
return 0; 
} 
if (weights[n - 1] > maxWeight) 
{ 
return knapsack(weights, values, n - 1, maxWeight);
}
int includeItem = values[n - 1] + knapsack(weights, values, n - 1, maxWeight - weights[n - 1]);

int excludeItem = knapsack(weights, values, n - 1, maxWeight);

return Math.max(includeItem, excludeItem); 

} }




//// recursion my solution 

   
public class Solution {
    static int min_value=0;
    public static int allknapsack(int[] weights, int[] values, int n, int maxWeight , int index,int total_values)
    {
        if(index>=weights.length)
        {   
            // if(min_value<total_values)
            // {
            //     min_value=total_values;
            // }
         //   System.out.println(total_values);
            return 0;
        }
        
        int ans1,ans2;
        int myans;
        if(maxWeight-weights[index] >=0)
        {
          ans1=  values[index]+allknapsack(weights,values,n, maxWeight-weights[index] ,index+1,total_values+values[index]);
          ans2=  allknapsack(weights,values,n, maxWeight,index+1,total_values);
        
            myans=Math.max(ans1,ans2);
            
        }
            
        else{
            myans=allknapsack(weights,values,n, maxWeight,index+1,total_values);
            
        }
        
        return myans;
        
        
    }
    
    
	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
        
       return allknapsack(weights,values,n,maxWeight,0,0);
		
        
        //Your code goes here
	}

}














