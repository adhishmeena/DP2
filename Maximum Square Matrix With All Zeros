Maximum Square Matrix With All Zeros
Send Feedback
Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1
Sample Input 2:
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
Sample Output 2:
4



///main code 
/* Time Complexity: O(m*n)
Space Complexity: O(m*n) 
where m is number of rows and n is number of columns */

  
public class Solution {
	// public static void max_matrix(int )
    


	public static int findMaxSquareWithAllZeros(int[][] input){
        
        
        if(input.length==0 && input.length==0)
        {
            return 0;
        }
        
        int [][]dp= new int[input.length][input[0].length];
        
        for(int i =0;i<input[0].length;i++)
        {
            if(input[0][i]==1)
            {
                 dp[0][i]=0;
            }
            else{
                 dp[0][i]=1;
            }
            
           
        }
        
        
           for(int i =0;i<input.length;i++)
        {
            if(input[i][0]!=1)
            {
                 dp[i][0]=1;
            }
            else{
                 dp[i][0]=0;
            }
            
           
        }
        
        
        
//         for(int i =0;i<dp.length;i++)
//         {
//             for(int j=0;j<dp[0].length;j++)
//             {
                
//                 System.out.print(dp[i][j]);
//             }
//             System.out.println();
            
//         }
        
        for(int i =1;i<dp.length;i++)
        {
        
            for(int j=1;j<dp[0].length;j++)
            { 
              if(input[i][j]==0)
              {
                  dp[i][j]=1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                  
              }
               else{
                   dp[i][j]=0;
                   
               }
                
            }
            
            
        }
        
        int max_value_of_dp_matrix=0;
        for(int i =1;i<dp.length;i++)
        {
        
            for(int j=1;j<dp[0].length;j++)
            { 
              if(max_value_of_dp_matrix<dp[i][j])
              {
                  max_value_of_dp_matrix=dp[i][j];
              }
                
            }
            
            
        }
        
        
        
        
        
        
        return max_value_of_dp_matrix;
        
	/* Your class should be named Solution.
	 * Don't write main() function.
	 * Don't read input, it is passed as function argument.
	 * Return output and don't print it.
	 * Taking input and printing output is handled automatically.
	 */
	
	}

	
}
