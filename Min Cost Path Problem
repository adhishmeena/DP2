Min Cost Path Problem
Send Feedback
An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.
 Input format :
The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.

The second line onwards, the next 'M' lines or rows represent the ith row values.

Each of the ith row constitutes 'N' column values separated by a single space.
Output format :
Print the minimum cost to reach the destination.
Constraints :
1 <= M <= 10 ^ 2
1 <= N <=  10 ^ 2

Time Limit: 1 sec
Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13
Sample Input 2 :
3 4
10 6 9 0
-23 8 9 90
-200 0 89 200


// Main Code


public class Solution {
    
    public static int allcost(int cost, int i , int j ,int arr[][],int dp[][])
    {
       
        
        if(i>arr.length-1 || j>arr[0].length-1)
        { 
            
            return Integer.MAX_VALUE;
        }
        
         if(i==arr.length-1 && j==arr[0].length-1)
        {
      //      System.out.println(cost);
            return arr[i][j];
        }
        
        int ans1,ans2,ans3;
        if(dp[i+1][j]==Integer.MIN_VALUE)
        {
          ans1=   allcost(cost+arr[i][j],i+1,j,arr,dp);
          dp[i+1][j]=ans1;  
        }
        
        else{
            
            ans1=dp[i+1][j];
        }
       
        if(dp[i+1][j+1]==Integer.MIN_VALUE)
        {
             ans2= allcost(cost+arr[i][j],i+1,j+1,arr,dp);
             dp[i+1][j+1]=ans2;
        }
       else{
           
            ans2= dp[i+1][j+1];
       }
       
       if(dp[i][j+1]==Integer.MIN_VALUE)
       {
             ans3=allcost(cost+arr[i][j],i,j+1,arr,dp);
             dp[i][j+1]=ans3;
       }
        
       else{
           
           ans3=dp[i][j+1];
       } 
       
     
        
        
        return arr[i][j]+ Math.min(ans1,Math.min(ans2,ans3));
        
    }
        

	public static int minCostPath(int[][] input) {
       
        
        int [][]dp=new int[input.length+1][input[0].length+1]; // we have maintained dp of one size grater and following bottom up approach
        
        for(int i=0;i<dp.length;i++)
        {
            for(int j=0;j<dp[0].length;j++)
            {
                dp[i][j]=Integer.MIN_VALUE;
                
            }
            
        }
        
         return allcost(0,0,0,input,dp);
    //    return 0;
        
		//Your code goes here
	}

}
    


